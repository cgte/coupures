# Put this in your ~/.gitconfig or ~/.config/git/config
# Windows users: "~" is your profile's home directory, e.g. C:\Users\<YourName>
[user]
	name = Colin Goutte
	email = cgte@bk.ru
[color]
	# Enable colors in color-supporting terminals
	ui = auto
[alias]
    di = diff
    st = status --short
    ci = commit
    co = checkout
    pf = push -f
    b = branch
    ap = add -p
    cm = checkout master

    cbranch = ! git b | grep '*' | cut -c 3-
    cb = ! git cbranch
    tagtip = ! git tag | egrep '[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+' | sort -hr | head -n 1

    back = checkout -

    # DIFF
    ds = diff --staged
    dm = diff master

    dnom = diff --name-only master
    # Personal, i use dm for a more time than dno.
    dmno = diff --name-only master

    dno = diff --name-only
    sk = ! git st | grep -v ^??
    sukrel = "!cd -- ${GIT_PREFIX:-.}; git status --short | grep ^??"
    sukund = "!cd -- ${GIT_PREFIX:-.}; git status --short . | grep ^??"
    suk = sukund
    #      ^^^ because git goes back to the repo's root

    aaq = commit --amend --no-edit -a # Amend all quiet
    fixup = aaq

	lg = log --graph --date=relative --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset'
	oops = commit --amend --no-edit
    tip = show --summary
	review-local = "!git lg @{push}.."
	# Or pre 2.5, as we didn't differential push and upstream in shorthands:
	# review-local = lg @{upstream}..

    nmm = "! f() { git branch --no-merged ${1-master}; } ;  f | cut -c 3- | sed 's:^origin/::' | grep -v '^master$\\|^HEAD' "

    do = ! git diff origin/`git branch | grep '*' | cut -c  3-`
    #comprare with remote counterpart

    rm-merged = !  git branch --merged master | cut -c 3- | grep -v '^master' | xargs git branch -d
    # remove branches that are merged in master

    prp = ! git pull || git um && git back && git rp
    #Pulls master then checkout back the working branch Rebases the pushes

    rp = ! git r && git push -uf
    r = rebase master
    pp = ! git pull && git push
    #quicker when you are on master since no useless

    um = ! git checkout master && git pull && git push
    umrp = ! git um && git back && git rp

    ml = merge --no-ff -
    mffo= merge --ff-only
    mnff = merge --no-ff

    rb = "! bash ~/bin/git_not_merged_branches.sh"
    integ = ! git um && git ml && git push
    integrate = "! bash ~/bin/git_integrate.sh "
    # https://github.com/cgte/homebin

[core]
	# Don't paginate output by default
	pager = bat
	#
    editor = vim
	# Out of luck: on Windows w/o msysGit? You may have Notepad++…
	# editor = 'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin
	#
	# If you want to use Sublime Text 2's subl wrapper:
	# editor = subl -w
	#
	# Or Atom, perhaps:
	# editor = atom --wait
	#
	# Sublime Text 2 on Windows:
	# editor = 'c:/Program Files (x86)/Sublime Text 2/sublime_text.exe' -w
	#
	# Sublime Text 3 on Windows:
	# editor = 'c:/Program Files/Sublime Text 3/subl.exe' -w
	#
	# Don't consider trailing space change as a cause for merge conflicts
	whitespace = -trailing-space
	quotepath = false
[diff]
	# Use better, descriptive initials (c, i, w) instead of a/b.
	mnemonicPrefix = true
	# Show renames/moves as such
	renames = true
	# When using --word-diff, assume --word-diff-regex=.
	wordRegex = .
	# Display submodule-related information (commit listings)
	submodule = log
[fetch]
	# Auto-fetch submodule changes (sadly, won't auto-update)
	recurseSubmodules = on-demand
[grep]
	# Consider most regexes to be ERE
	extendedRegexp = true
[log]
	# Use abbrev SHAs whenever possible/relevant instead of full 40 chars
	abbrevCommit = true
	# Automatically --follow when given a single path
	follow = true
[merge]
	# Display common-ancestor blocks in conflict hunks
    conflictStyle = diff3
    tool = kdiff3
	guitool = kdiff3

[mergetool]
	# Clean up backup files created by merge tools on tool exit
	keepBackup = false
	# Clean up temp files created by merge tools on tool exit
	keepTemporaries = false
	# Put the temp files in a dedicated dir anyway
	writeToTemp = true
	# Auto-accept file prompts when launching merge tools
    prompt = false


[mergetool "vimdiff"]
    cmd = vim -f -d \"$LOCAL\" \"$MERGED\" \"$REMOTE\"

[pull]
	# This is GREAT… when you know what you're doing and are careful
	# not to pull --no-rebase over a local line containing a true merge.
	# rebase = true
	# WARNING! This option, which does away with the one gotcha of
	# auto-rebasing on pulls, is only available from 1.8.5 onwards.
	rebase = preserve
[push]
	# Default push should only push the current branch to its push target, regardless of its remote name
	default = current
	# When pushing, also push tags whose commit-ishs are now reachable upstream
	followTags = true
[rerere]
	# If, like me, you like rerere, uncomment these
	autoupdate = true
	enabled = true
[status]
	# Display submodule rev change summaries in status
	submoduleSummary = true
	# Recursively traverse untracked directories to display all contents
	showUntrackedFiles = all
[color "branch"]
	# Blue on black is hard to read in git branch -vv: use cyan instead
	upstream = cyan
[tag]
	# Sort tags as version numbers whenever applicable, so 1.10.2 is AFTER 1.2.0.
	sort = version:refname
[versionsort]
	prereleaseSuffix = -pre
	prereleaseSuffix = .pre
	prereleaseSuffix = -beta
	prereleaseSuffix = .beta
	prereleaseSuffix = -rc
    prereleaseSuffix = .rc

[init]
	templatedir = ~/.git_template
[cola]
	spellcheck = false
[credential]
	helper = store --file ~/.my-credentials
